{"name":"Ucreate","tagline":"Create strongly typed views and generate DocTypes, DataTypes and MediaTypes for Umbraco 7 using a code-first approach.","body":"UCreate [![Build status](https://ci.appveyor.com/api/projects/status/60v4v2cbl6nxmf0q)](https://ci.appveyor.com/project/nicbell/ucreate)\r\n=======\r\n\r\nCreate doc types, media types and data types for Umbraco 7 using a code-first approach. Inspired by [USiteBuilder](https://github.com/spopovic/uSiteBuilder).\r\n\r\nAvailable on NuGet\r\n---\r\n```\r\nPM> Install-Package UCreate\r\n```\r\n\r\nUsage\r\n---\r\n\r\nThe only configuration you'll need to get started is an app setting in your ```web.config```. This tells UCreate to sync your doc types, media types and data types on application start.\r\n\r\n```xml\r\n...\r\n<appSettings>\r\n    ...\r\n    <add key=\"UCreateSyncEnabled\" value=\"true\" />\r\n    ...\r\n</appSettings>\r\n...\r\n```\r\n\r\nDocType example\r\n---\r\nDoc types support property inheritance. Here is a list of available [icons](http://nicbell.github.io/ucreate/icons.html).\r\n```csharp\r\n[DocType(Name = \"Page With Title\",\r\n    Icon = \"icon-zip color-blue\",\r\n    AllowedAsRoot = true,\r\n    AllowedTemplates = new[] { \"PageWithTitle\" },\r\n    DefaultTemplate = \"PageWithTitle\")]\r\npublic class PageWithTitle : BaseDocType\r\n{\r\n    public PageWithTitle(IPublishedContent content) : base(content)\r\n    { }\r\n\r\n    [Property(Alias = \"heading\", TypeName = PropertyTypes.Textstring, Description = \"Heading for page\", Mandatory = true, TabName = \"Content\")]\r\n    public string Heading { get; set; }\r\n}\r\n```\r\n\r\nMediaType example\r\n---\r\nMedia types support property inheritance.\r\n```csharp\r\n[MediaType(Name = \"Folder With Cover\",\r\n    Icon = \"icon-folder color-blue\",\r\n    AllowedAsRoot = true,\r\n    IsContainer = true,\r\n    AllowedTypes = new[] { \"FolderWithCover\", \"Image\" })]\r\npublic class FolderWithCover\r\n{\r\n    [Property(Alias = \"coverImage\", TypeName = PropertyTypes.MediaPicker, Description = \"Cover image.\", Mandatory = true)]\r\n    public string CoverImage { get; set; }\r\n}\r\n```\r\n\r\nDataType with prevalues example\r\n---\r\n```csharp\r\n[DataType(EditorAlias = Umbraco.Core.Constants.PropertyEditors.ColorPickerAlias,\r\n    Name = \"Nice Color Picker\",\r\n    Key = \"1bfca1e7-95d0-485e-bd94-9fe9c2b8821f\",\r\n    DBType = DataTypeDatabaseType.Nvarchar)]\r\npublic class NiceColorPicker : IHasPreValues\r\n{\r\n    /// <summary>\r\n    /// Implementing PreValues\r\n    /// </summary>\r\n    public IDictionary<string, PreValue> PreValues\r\n    {\r\n        get\r\n        {\r\n            return new Dictionary<string, PreValue> {\r\n                {\"1\", new PreValue(\"ff00ff\")},\r\n                {\"2\", new PreValue(\"1f00f1\")},\r\n                {\"3\", new PreValue(\"123123\")},\r\n                {\"4\", new PreValue(\"ffffff\")}\r\n            };\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nStrongly typed views\r\n---\r\nIn order to use your doc types on the front-end you need to enable the `PublishedContentModel` factory. UCreate can do this for you if add the following app setting:\r\n```xml\r\n...\r\n<appSettings>\r\n    ...\r\n    <add key=\"UCreatePublishedModelsEnabled\" value=\"true\" />\r\n    ...\r\n</appSettings>\r\n...\r\n```\r\nThen using the doc types in your views is pretty simple.\r\n```html\r\n@inherits Umbraco.Web.Mvc.UmbracoTemplatePage<NicBell.UCreate.Test.DocTypes.PageWithTitle>\r\n\r\n@{\r\n    Layout = null;\r\n}\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta name=\"viewport\" content=\"width=device-width\" />\r\n    <title>PageWithTitle</title>\r\n</head>\r\n<body>\r\n    <h1>@Model.Content.Heading</h1>\r\n</body>\r\n</html>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}